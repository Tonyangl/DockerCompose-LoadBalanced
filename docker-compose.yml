# Use docker-compose syntax Version 2
version: "2"

services:
  # Our main "tof web app" service which has the express aplication inside
  webapp1: &webapp1
    build:
      # Look for the Dockerfile inside the "webapp" folder
      context: ./webapp
      dockerfile: Dockerfile
    restart: always

    ports:
      - "8080"
   # volumes:
   #   - ./../home/resource/data:/usr/src/workground/data
    depends_on:
      - dbmysql
    links:
      - dbmysql
    environment:
      - DATABASE_HOST=dbmysql
    networks:
      - front-tier

  # Our replicas of the main "nodeapp", just so that NGINX can load-balance
  # E.g when there's a new version available of our app
  # We'll take each one of these 3 services done, update them and bring them back up 1-by-1
  webapp2:
    <<: *webapp1
  #  extends:
  #    service: webapp1
  
  webapp3:
    <<: *webapp1
  #  extends:
  #    service: webapp1
  
  # NGINX will reverse proxy the express application
  nginx:
    build: ./nginx
    restart: always

    # Bind port 80 in the service to port 80 on the host
    ports:
        - "80:80"
    networks:
      - front-tier
  
  dbmysql:
    #image: mysql:8.0
    build: ./mysql8.0
    restart: always
    #container_name: mariadb10.3
    #ports:
    #  - "3364:3306"
    networks:
      - front-tier
    #environment:
    #  - MYSQL_DATABASE=web_tof
    #  - MYSQL_USER=tofweb
    #  - MYSQL_PASSWORD=tof2000
    #  - MYSQL_ROOT_PASSWORD=tof1500TOF
    #  - TZ=Asia/Shanghai
    volumes:
      - ./mysql8.0/conf.d:/etc/mysql/conf.d
      

networks:
  front-tier:
    driver: bridge